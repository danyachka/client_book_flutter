// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    appointments,
    clients,
    expenses,
  ];
  late final Shape0 appointments = Shape0(
      source: i0.VersionedTable(
        entityName: 'appointments',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 clients = Shape1(
      source: i0.VersionedTable(
        entityName: 'clients',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_7,
          _column_8,
          _column_9,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 expenses = Shape2(
      source: i0.VersionedTable(
        entityName: 'expenses',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_10,
          _column_5,
          _column_11,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get clientId =>
      columnsByName['client_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get startTime =>
      columnsByName['start_time']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get endTime =>
      columnsByName['end_time']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get notificationStatus =>
      columnsByName['notification_status']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get value =>
      columnsByName['value']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<String> get appointmentText =>
      columnsByName['appointment_text']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<int> _column_1(String aliasedName) =>
    i1.GeneratedColumn<int>('client_id', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_2(String aliasedName) =>
    i1.GeneratedColumn<int>('start_time', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_3(String aliasedName) =>
    i1.GeneratedColumn<int>('end_time', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>('notification_status', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultValue: const CustomExpression('\'enabled\''));
i1.GeneratedColumn<double> _column_5(String aliasedName) =>
    i1.GeneratedColumn<double>('value', aliasedName, false,
        type: i1.DriftSqlType.double,
        defaultValue: const CustomExpression('0.0'));
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>('appointment_text', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultValue: const CustomExpression('\'\''));

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get phoneNumber =>
      columnsByName['phone_number']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get picturePath =>
      columnsByName['picture_path']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>('phone_number', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultValue: const CustomExpression('\'\''));
i1.GeneratedColumn<String> _column_9(String aliasedName) =>
    i1.GeneratedColumn<String>('picture_path', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultValue: const CustomExpression('\'\''));

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get value =>
      columnsByName['value']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<int> get time =>
      columnsByName['time']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultValue: const CustomExpression('\'\''));
i1.GeneratedColumn<int> _column_11(String aliasedName) =>
    i1.GeneratedColumn<int>('time', aliasedName, false,
        type: i1.DriftSqlType.int);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
    ));
